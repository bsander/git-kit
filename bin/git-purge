#!/bin/bash

# Define command flags
set_flags () {
  DEFINE_string "branch" "$(git select-branch)" "branch to use as HEAD" "b"
  DEFINE_string "remote" "$(git select-remote)" "remote to use" "r"
}

# Load shared functions and parse arguments
BASE_DIR=$(d() { (cd -P "$(dirname "$1")" && pwd) }; while [ -h "${S=${BASH_SOURCE[0]}}" ]; do D=$(d "$S"); S=$(readlink "$S"); [[ $S != /* ]] && S="$D/$S"; done; d "$S")
. "$BASE_DIR/functions.sh"


# Don't use :- on $1 to disable the prefix check when passing ""
PREFIX="${1-^\s*\(feature\|release\|hotfix\)/}"
# shellcheck disable=SC2154
REMOTE=$(git select-remote "$FLAGS_remote" 2>/dev/null || :)
# shellcheck disable=SC2154
BRANCH=$(git select-branch "$FLAGS_branch" 2>/dev/null || :)
# The 2nd grep is for an actual asterisk (*) character, not a wildcard or regex. This signifies the current branch.
BRANCHES=$(git branch --merged "$BRANCH" | grep -v "\\s*$BRANCH$" | grep -v "^\\*" | grep "$PREFIX" || :)

[[ $BRANCHES ]] || {
  echo "No purgable branches found for $BRANCH"
  exit 0
}
[[ -n "$REMOTE" ]] && REMOTE_BRANCHES=$(echo "$BRANCHES" | xargs -n 1 -I % bash -c \
  "git remote-exists $REMOTE % && echo % || :")

[[ $REMOTE_BRANCHES ]] && {
  echo
  echo "${REMOTE}:"
  echo "$REMOTE_BRANCHES" | xargs -n 1 echo "-"
}
echo; echo "local:"; echo "$BRANCHES" | xargs -n 1 echo "-"
yn "Delete ${REMOTE_BRANCHES:+remote and }local branches?"
echo

if [[ $REMOTE_BRANCHES ]]; then
  # no quotes on last argument, we want it to be expanded here
  # shellcheck disable=2086
  (set -x; git push "$REMOTE" --delete $REMOTE_BRANCHES )
fi
# shellcheck disable=2086
(set -x; git branch --delete $BRANCHES ) # same
