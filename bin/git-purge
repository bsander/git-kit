#!/bin/bash -Ee
#
# Removes all local branches that have been merged into the current branch along with their
# remote tracking branches.
#
# Usage:
# git purge [prefix=feature/ [remote]]

# Fully resolve base directory: http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
. "$BASE_DIR/functions.sh"

REMOTE=$(git select-remote "$2" 2>/dev/null || :)
# Don't use :- on $1 to disable the prefix check when passing ""
# Also, the grep is for an actual asterisk (*) character, not a wildcard or regex.
# This signifies the current branch.
BRANCHES=$(git branch --merged | grep -v "^\\*" | grep "^\s*${1-feature/}" || :)
[[ $BRANCHES ]] || {
  echo "No purgable branches found within $(git current-branch) branch"
  exit 0
}
[[ -n "$REMOTE" ]] && REMOTE_BRANCHES=$(echo "$BRANCHES" | xargs -n 1 -I % bash -c \
  "git remote-exists $REMOTE % && echo % || :")

[[ $REMOTE_BRANCHES ]] && {
  echo
  echo "${REMOTE}:"
  echo "$REMOTE_BRANCHES" | xargs -n 1 echo "-"
}
echo; echo "local:"; echo "$BRANCHES" | xargs -n 1 echo "-"
# Wait for <enter> (or abort with ^C)
yn "Delete ${REMOTE_BRANCHES:+remote and }local branches?"
echo

if [[ $REMOTE_BRANCHES ]]; then
  # no quotes on last argument, we want it to be expanded here
  # shellcheck disable=2086
  (set -x; git push "$REMOTE" --delete $REMOTE_BRANCHES )
fi
# shellcheck disable=2086
(set -x; git branch --delete $BRANCHES ) # same
