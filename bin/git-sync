#!/usr/bin/env bash

# Define command flags
set_flags () {
  cmdarg 'b?' 'branch' 'Branch to use as reference' "$(git select-branch)"
  cmdarg 'r?' 'remote' 'Remote to use' "$(git select-remote)"
}

# Load shared functions and parse arguments
BASE_DIR=$(d() { (cd -P "$(dirname "$1")" && pwd) }; while [ -h "${S=${BASH_SOURCE[0]}}" ]; do D=$(d "$S"); S=$(readlink "$S"); [[ $S != /* ]] && S="$D/$S"; done; d "$S")
# shellcheck source=functions.sh disable=1091
source "$BASE_DIR/functions.sh"


# shellcheck disable=SC2154
REMOTE=$(git select-remote "${cmdarg_cfg['remote']}" 2>/dev/null || true)
HEAD=$(git select-branch "${cmdarg_cfg['branch']}" 2>/dev/null || true)

BRANCHES=($(git for-each-ref refs/heads --format="%(refname:short)"))
MERGE=()
PUSH=()

(set -x; git fetch --tags --prune "$REMOTE")
# Sigh. Fuck bash's ridiculous notation here. http://stackoverflow.com/a/7577209/649581
for BRANCH in "${BRANCHES[@]:+${BRANCHES[@]}}"; do
  git remote-exists "$REMOTE" "$BRANCH" || continue # Exit early if branch is not remotely tracked
  read -r left right <<< "$(git rev-list --count --left-right "$BRANCH...$REMOTE/$BRANCH")"
  (( left > 0 )) && PUSH+=($BRANCH)
  (( right > 0 )) && MERGE+=($BRANCH)
done

# Merge branches with remote updates
for BRANCH in "${MERGE[@]:+${MERGE[@]}}"; do
  (set -x; git checkout -q "$BRANCH" && git merge --ff-only "$REMOTE/$BRANCH")
done
git current-branch "$HEAD" || (set -x; git checkout -q "$HEAD")

# Push branches with local updates
if [[ -n "${PUSH[@]:+${PUSH[@]}}" ]]; then
  echo
  echo "Locally updated branches:"
  echo "${PUSH[@]}" | xargs -n 1 echo "-"
  echo
  yn "Push all changes to $REMOTE?" && (set -x; git push --tags "$REMOTE" "${PUSH[@]}")
fi

# Cleanup
git purge -r "$REMOTE"
